import{_ as e,r as t,o,c as p,b as s,d as n,e as c,w as i,a as l}from"./app-78262cf9.js";const u={},r=s("h1",{id:"配置",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#配置","aria-hidden":"true"},"#"),n(" 配置")],-1),d=s("h2",{id:"默认配置",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#默认配置","aria-hidden":"true"},"#"),n(" 默认配置")],-1),k=s("p",null,[s("code",null,"useRequest"),n("默认开启了一些配置，使得它会具有以下行为：")],-1),m=s("ul",null,[s("li",null,"发起请求时，取消尚未完成的请求"),s("li",null,"组件卸载时，取消该组件尚未完成的请求")],-1),v=s("a",{href:"#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE"},"全局配置",-1),h=s("a",{href:"#%E5%B1%80%E9%83%A8%E9%85%8D%E7%BD%AE"},"局部配置",-1),b=l(`<h2 id="全局配置" tabindex="-1"><a class="header-anchor" href="#全局配置" aria-hidden="true">#</a> 全局配置</h2><p>如果你想全局定义<code>useRequest</code>的行为，避免在使用时进行大量重复的配置，可以通过使用<code>setGlobalOptions</code>来达到这个目的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setGlobalOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@superarale/vue-use-request&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token function">setGlobalOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  useLastRequest<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="局部配置" tabindex="-1"><a class="header-anchor" href="#局部配置" aria-hidden="true">#</a> 局部配置</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.vue</span>
<span class="token comment">// ...</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> result <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  useLastRequest<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 覆盖全局配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><p><code>useRequest</code>导出了配置项的Typescript类型<code>IUseRequestOptions</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> IUseRequestOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@superarale/vue-use-request&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token keyword">const</span> options<span class="token operator">:</span> IUseRequestOptions <span class="token operator">=</span>  <span class="token punctuation">{</span>
  useLastRequest<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> result <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),_=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"TIP"),s("p",null,"配置权重：默认配置 < 全局配置 < 局部配置。")],-1);function f(g,w){const a=t("RouterLink");return o(),p("div",null,[r,d,k,m,s("p",null,[n("你可以通过"),v,n("、"),h,n("覆盖它，具体配置项可参考 "),c(a,{to:"/api/#options"},{default:i(()=>[n("Options")]),_:1}),n("。")]),b,_])}const q=e(u,[["render",f],["__file","options.html.vue"]]);export{q as default};
